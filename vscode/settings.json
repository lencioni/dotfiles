{
  "breadcrumbs.enabled": true,

  "breadcrumbs.symbolPath": "off",

  "cSpell.userWords": [
    "abandonware",
    "accessor",
    "admin",
    "affordance",
    "aggregator",
    "AgileBits",
    "Airbnb",
    "Airbnb's",
    "Airbnbâ€™s",
    "Airmetro",
    "Airmetro's",
    "allowlist",
    "allowlisted",
    "Ansible",
    "API",
    "APIs",
    "app",
    "Appveyor",
    "assistive",
    "async",
    "asynchronicity",
    "auth",
    "autocomplete",
    "autofill",
    "autofix",
    "backend",
    "backported",
    "backreference",
    "backtick",
    "backticks",
    "Bazel",
    "BEM",
    "BFS",
    "bitmask",
    "bitmasks",
    "blockquote",
    "blockquotes",
    "blog",
    "blogs",
    "Buildkite",
    "cacheability",
    "callsites",
    "camelCase",
    "camelCasing",
    "cancelable",
    "changelog",
    "cheatsheet",
    "checkboxes",
    "checkin",
    "chruby",
    "className",
    "Clojure",
    "codebase",
    "codegen",
    "codemod",
    "codepath",
    "CoffeeScript",
    "Colemak",
    "colocated",
    "committer",
    "componentization",
    "composable",
    "config",
    "configs",
    "copypasta",
    "cron",
    "CSS",
    "CTA",
    "CVIs",
    "Datadog",
    "datepicker",
    "datepickers",
    "Deconstruct",
    "dedupes",
    "Deduping",
    "defaultProps",
    "denylist",
    "deoptimization",
    "deoptimized",
    "deoptimizing",
    "Deployboard",
    "destructure",
    "destructured",
    "destructuring",
    "DFS",
    "diff",
    "diffs",
    "discoverability",
    "dotfile",
    "dotfiles",
    "Dropbox",
    "dropdown",
    "dyno",
    "EC2",
    "Ellipsize",
    "ellipsized",
    "errored",
    "ES2015",
    "ES2016",
    "ES6",
    "ES7",
    "ESLint",
    "etc",
    "extendable",
    "Facebook",
    "Facebook's",
    "fallback",
    "fallbacks",
    "falsey",
    "FB",
    "FileMaker",
    "filesize",
    "filesystem",
    "filetype",
    "findability",
    "Firefox",
    "Fixnum",
    "followup",
    "frontend",
    "GitHub",
    "gitignore",
    "GraphQL",
    "grayscale",
    "grokability",
    "gzip",
    "hacky",
    "Haml",
    "Hammerspoon",
    "happo",
    "Happo",
    "Harband",
    "Hedrick",
    "Henric",
    "Heroku",
    "HOC",
    "homogenous",
    "hostnames",
    "https",
    "Hurrell",
    "hyperloop",
    "Hyperloop",
    "hypernova",
    "iCloud",
    "IE8",
    "iframe",
    "immersive",
    "ImportJS",
    "infocmp",
    "inline",
    "inlined",
    "inlines",
    "inlining",
    "iOS",
    "irbnb",
    "iTerm",
    "janky",
    "Jesupaul",
    "Jira",
    "JS",
    "JSON",
    "JSX",
    "Karabiner",
    "Keychain",
    "keychains",
    "Kittiyachavalit",
    "KPI",
    "Kubernetes",
    "LastPass",
    "Lencioni",
    "lifecycle",
    "linaria",
    "linebreak",
    "linter",
    "loadview",
    "Lua",
    "Lyft",
    "MailMate",
    "mapStateToProps",
    "memcached",
    "memoization",
    "memoize",
    "memoized",
    "memoizing",
    "mergeable",
    "Mesos",
    "metadata",
    "microservice",
    "middleware",
    "minifier",
    "mixin",
    "mixins",
    "mkview",
    "monit",
    "MySQL",
    "navigations",
    "nginx",
    "npm",
    "nvALT",
    "OCaml",
    "octothorpe",
    "ok",
    "overpromising",
    "overscrolling",
    "PANTONE",
    "PascalCasing",
    "passphrases",
    "permalinks",
    "PHP",
    "plugin",
    "plugins",
    "PNG",
    "PNGs",
    "pollyfills",
    "polyfill",
    "polyfills",
    "postprocess",
    "PowerPC",
    "premerge",
    "prescan",
    "programmatically",
    "propTypes",
    "prototypal",
    "PureComponents",
    "pushState",
    "quicksort",
    "rbenv",
    "readability",
    "rebalance",
    "rebased",
    "recurse",
    "Recurse",
    "recursed",
    "recursing",
    "Redis",
    "Redux",
    "refactor",
    "refactored",
    "referenceable",
    "regex",
    "regexes",
    "repo",
    "repos",
    "requestAnimationFrame",
    "retrigger",
    "rollout",
    "rsync",
    "rulesdir",
    "runtimes",
    "RVM",
    "scannable",
    "Scheuermann",
    "screencast",
    "screencasts",
    "screenreaders",
    "screenshot",
    "screenshots",
    "screenshotting",
    "SDK",
    "segfaults",
    "serializable",
    "serializer",
    "serviceworker",
    "Shar",
    "sharded",
    "Sharmila",
    "shouldComponentUpdate",
    "showstopper",
    "Skevy",
    "SMS",
    "snuck",
    "spellchecker",
    "spellfile",
    "SPOF",
    "SPOFs",
    "stateful",
    "stringify",
    "Stringifyable",
    "stringifying",
    "struct",
    "stylesheet",
    "stylesheets",
    "subdomain",
    "subdomains",
    "submodule",
    "submodules",
    "Sugarman",
    "switchover",
    "symlinked",
    "symlinking",
    "symlinks",
    "tangly",
    "TC39",
    "templating",
    "terminfo",
    "timestamp",
    "tmux",
    "toolchain",
    "tooltip",
    "tooltips",
    "TOTP",
    "transpile",
    "transpiled",
    "transpiles",
    "trebuchets",
    "treehouse",
    "Trotzig",
    "truthiness",
    "truthy",
    "TypeScript",
    "UI",
    "unarchive",
    "uncompiled",
    "underdelivered",
    "underdelivering",
    "uninstalling",
    "Uninstantiated",
    "unitless",
    "unmerged",
    "unprefixed",
    "unregistering",
    "unsetting",
    "unstyled",
    "unsubscribe",
    "URL",
    "URLs",
    "username",
    "usernames",
    "UX",
    "versioned",
    "viewport",
    "viewports",
    "vim",
    "waypoint",
    "webpack",
    "webviews",
    "whitelist",
    "whitespace",
    "wiki",
    "wikitext",
    "Wincent",
    "wishlisted",
    "xargs",
    "zsh"
  ],

  "diffEditor.renderSideBySide": true,

  "editor.accessibilitySupport": "off",

  // Prevent typing things like `.` and `;` from accepting autocomplete suggestions
  "editor.acceptSuggestionOnCommitCharacter": false,

  "editor.autoClosingBrackets": "never",

  "editor.autoClosingQuotes": "never",

  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.fixAll.markdownlint": "explicit"
  },

  "editor.folding": false,

  "editor.renderControlCharacters": false,

  // TODO: render trailing whitespace?
  "editor.renderWhitespace": "none",

  "editor.rulers": [
    100,
  ],

  "editor.fontFamily": "Source Code Variable, Source Code Pro",

  "editor.fontSize": 16,

  "editor.fontWeight": "400",

  "editor.minimap.enabled": false,

  "editor.renderIndentGuides": false,

  // Make pressing tab fast for running snippets
  "editor.tabCompletion": "onlySnippets",

  "editor.tabSize": 2,

  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        // Italic comments
        "scope": "comment",
        "settings": {
          "fontStyle": "italic",
        },
      },
    ],
  },

  "editor.wordWrap": "on",

  // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade,
  // slim, xml, xsl, css, scss, sass, less and stylus.
  "emmet.showExpandedAbbreviation": "inMarkupAndStylesheetFilesOnly",

  "eslint.enable": true,

  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
  ],

  "extensions.ignoreRecommendations": false,

  "files.associations": {
    "*.html": "html",
  },

  "files.insertFinalNewline": true,

  "files.trimTrailingWhitespace": true,

  "git.enabled": true,

  "html.autoClosingTags": false,

  "javascript.autoClosingTags": false,

  "typescript.autoClosingTags": false,

  "liveshare.audio.joinCallBehavior": "accept",

  "search.exclude": {
    "**/bower_components": true,
    "**/node_modules": true,
    "**/tmp": true,
  },
  "search.location": "panel",
  "search.useReplacePreview": false,

  "terminal.integrated.fontFamily": "Source Code Variable, Source Code Pro",

  "terminal.integrated.fontWeight": "400",

  "terminal.integrated.fontSize": 16,

  "terminal.integrated.scrollback": 100000,

  "typescript.disableAutomaticTypeAcquisition": true,

  "typescript.reportStyleChecksAsWarnings": false,

  "yaml.validate": true,

  "vim.hlsearch": true,

  "vim.leader": "<space>",

  "vim.insertModeKeyBindings": [
    // Easy escape to normal mode
    {
      "before": [
        "j",
        "j",
      ],
      "after": [
        "<Esc>",
      ],
    },
  ],

  "vim.normalModeKeyBindingsNonRecursive": [
    // gf is broken, so use gd instead
    {
      "before": [
        "g",
        "f",
      ],
      "after": [
        "g",
        "d",
      ],
    },

    // Toggle buffer
    {
      "before": [
        "<leader>",
        "<leader>",
      ],
      "commands": [
        {
          "command": "workbench.action.openPreviousEditorFromHistory",
        },
        {
          "command": "workbench.action.acceptSelectedQuickOpenItem",
        },
      ],
    },

    // Easy save
    {
      "before": [
        "<leader>",
        "w",
      ],
      "commands": [
        {
          "command": "workbench.action.files.save",
        },
      ],
    },

    // Command-T
    {
      "before": [
        "<leader>",
        "t",
      ],
      "commands": [
        {
          "command": "workbench.action.quickOpen",
        },
      ],
    },

    // Join lines with comments
    {
      "before": [
        "J",
      ],
      "after": [],
      "commands": [
        {
          "command": "joinCommentAware.join",
          "args": [],
        },
      ],
    },

    // vim-vinegar
    {
      "before": [
        "-",
      ],
      "commands": [
        {
          "command": "breadcrumbs.toggleToOn",
          "when": "!config.breadcrumbs.enabled",
        },
        {
          "command": "breadcrumbs.focusAndSelect",
          "when": "breadcrumbsPossible",
        },
      ],
    },
  ],

  /*
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<tab>",
      ],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
        }
      ]
    }
  ],
  */
  "window.title": "${rootName}${separator}${activeEditorLong}",

  "window.zoomLevel": 0,

  "workbench.activityBar.visible": false,

  "workbench.colorTheme": "Monokai",

  "workbench.editor.showTabs": false,

  "workbench.panel.defaultLocation": "right",

  "workbench.settings.editor": "json",

  "[javascript]": {
    // Disable formatOnSave for TS/JS since ESLint takes care of this
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },

  "[javascriptreact]": {
    // Disable formatOnSave for TS/JS since ESLint takes care of this
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },

  "[typescript]": {
    // Disable formatOnSave for TS/JS since ESLint takes care of this
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },

  "[typescriptreact]": {
    // Disable formatOnSave for TS/JS since ESLint takes care of this
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },

  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },

  "[yaml]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },
}
